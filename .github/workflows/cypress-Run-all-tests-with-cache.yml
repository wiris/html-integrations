# This is a sample workflow for Cypress.
# It setups the environment and uses a cache for better performance on node and Cypress.
# This action is based on the Kitchen Sink project (https://github.com/cypress-io/cypress-example-kitchensink/)
# It can run tests by Browser and test file selection.

name: Run Cypress tests

on: 
  - push
  - workflow_dispatch

jobs:

  setup-cypress:
    name: Setup and start the default app
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      # 01. install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # 02. Just so we learn about available environment variables GitHub provides
      # - name: Print env variables
      #   run: |
      #     npm i -g @bahmutov/print-env
      #     print-env GITHUB

      # 02. Restore the previous NPM modules and Cypress binary archives.
      # Any updated archives will be saved automatically after the entire
      # workflow successfully finishes.
      # See https://github.com/actions/cache
      # we use exact restore key to avoid NPM module snowballing
      # https://glebbahmutov.com/blog/do-not-let-npm-cache-snowball/
      - name: Cache central NPM modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}

      # 03. Use the exact restore key to avoid Cypress binary snowballing
      # https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/
      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ github.ref }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-${{ github.ref }}-${{ hashFiles('**/package.json') }}

      # 04. Cache local node_modules to pass to testing jobs
      - name: Cache local node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ github.ref }}-

      # 05. Install dependencies and verify Cypress
      - name: Install dependencies and verify Cypress
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        # print Cypress and OS info
        # This next command should use "npm ci" instead of "npm install"
        run: |
          npm ci
          npx cypress verify
          npx cypress info
          npx cypress version
          npx cypress version --component package
          npx cypress version --component binary
          npx cypress version --component electron
          npx cypress version --component node

  run-all-tests-matrix:
    runs-on: ubuntu-18.04

    needs: setup-cypress

    strategy:
      fail-fast: true
      matrix:
        # Define values for browsers from
        browser: ["chrome"]
        # browser: ["chrome", "edge", "firefox", "chromium"]
        type: ["all"]
        # type: ["smoke","e2e", "ui", "validation"]

    name: Run ${{ matrix.type }} tests on ${{ matrix.browser }}

    steps:
      - uses: actions/checkout@master

      - name: Checkout
        uses: actions/checkout@v2
    
      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Restore just local node_modules and the Cypress binary archives.
      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ github.ref }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-${{ github.ref }}-${{ hashFiles('**/package.json') }}

      - name: Cache local node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ github.ref }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ github.ref }}-

      # check the restored Cypress binary
      - name: Check binary
        run: |
          npx cypress cache path
          npx cypress cache list

      - name: Run tests by browser
        uses: cypress-io/github-action@v2
        timeout-minutes: 10
        with:
          # 'build' starts the defauld demo 
          build: npm run build
          # 'test:ci' runs tests over Docker image for build context 
          command: npm run test:ci
          record: false
          parallel: false
          group: "${{ matrix.type }} tests on ${{ matrix.browser }}"
          browser: ${{ matrix.browser }}
          config: "video: true"
          spec: |
            cypress/tests/**/*.js
          # config: "\"video\": true, \"screenshotsFolder\": \"cypress/screenshots/${{ matrix.browser }}\", \"videosFolder\": \"cypress/videos/${{ matrix.browser }}\", \"video\": true"
          # spec: cypress/tests/${{ matrix.type }}/*.js
        # env:
        # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
            # screenshotsFolder: "cypress/screenshots/${{ matrix.browser }}"
            # videosFolder: "cypress/videos/${{ matrix.browser }}"
        #   TERM: xterm
        #   CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
        #   CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      # Save videos and screenshots as test artifacts
      # https://github.com/actions/upload-artifact
      - name: Upload screenshots
        uses: actions/upload-artifact@master
        # there might be no screenshots created when:
        # - there are no test failures
        # so only upload screenshots if previous step has failed
        if: failure()
        with:
          name: screenshots-${{ matrix.type }}-${{ matrix.browser }}
          path: cypress/screenshots
      # video should always be generated
      - name: Upload videos for all tests
        uses: actions/upload-artifact@master
        with:
          name: videos-${{ matrix.type }}-${{ matrix.browser }}
          path: cypress/videos
